name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build
          cp -r dist/* ../backend/public/
          rm -rf dist

      - name: Build Backend
        run: |
          cd backend
          npm install
          npx tsc

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN_ALL }}

      - name: Create .env file
        run: |
          cd backend
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
          echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
          echo "DB_USER=${{ vars.DB_USER }}" >> .env
          echo "DB_PASS=${{ vars.DB_PASS }}" >> .env
          echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >> .env
          echo "DB_SCHEMA=${{ vars.DB_SCHEMA }}" >> .env

      - name: Build And Push Docker image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/civil:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Connect to EC2 instance using SSH
        env:
          PRIVATE_KEY: ${{ secrets.SSH_KEY  }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ secrets.DB_HOST }}
          docker ps

          # docker pull meowen0228/civil:latest
          # docker stop web
          # docker rm web
          # docker run --name web -p 8080:8080 -d meowen0228/civil:latest
          # docker image prune -f
